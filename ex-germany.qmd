```{r}
#| label: country-choice
#| warning: false

require(tidyverse)
require(scales)
require(countrycode)
require(leaflet)
require(sf)
dir.create("data")
dir.create("data/shapefiles")

country_code <- "DE"
country <- countrycode::countrycode(country_code, origin = 'eurostat', destination = 'country.name')

hist_pop <- readxl::read_xlsx(path = 'data/LAU2_REFERENCE_DATES_POPL.xlsx')
names(hist_pop)[4:9] <- substr(names(hist_pop)[4:9], 1, 8)
hist_pop <- hist_pop |> 
  mutate(across(starts_with("POP"), ~ replace(., which(. == -9999), NA)))
```

# `r country`

This chapter studies a sub sample containing historical LAU population data for `r country`.
The data set is prepared and reduced accordingly:

```{r}
#| label: preparations-subset

hist_pop <- hist_pop |> 
  filter(CNTR_CODE == "DE")
hist_pop
```

In `r country`, historical population data for `r dim(hist_pop)[1]` LAUs was collected.

## Geolocating Historical LAU Population Data

In order to geo-reference the historical LAU population data, the geo-shapes are needed.
They can be obtained via the *Eurostat* API and are downloaded for the year 2012:

```{r}
#| label: download-shapefile

shape_files <- giscoR::gisco_get_lau(year = "2012", cache_dir = 'data/shapefiles',
                                     verbose = TRUE, country = c(country))
shape_files
dim(shape_files)
dim(hist_pop)
```

While the historical population data set contains figures for `r dim(hist_pop)[1]` LAUs, polygons for `r dim(shape_files)[1]` LAUs could be retrieved via the API.

Since I want to ensure that at least every shape has historical population data, I merge the historical data onto the shapes:

```{r}
#| label: merge-sh-pop

shape_files <- shape_files |> 
  mutate(CNTR_LAU_CODE = paste0(CNTR_CODE, LAU_ID))
pop <- left_join(x = shape_files, y = hist_pop, by = join_by("CNTR_LAU_CODE"))
dim(pop)
```

Merge was successful.
However, differences amounts of LAUs still need further investigation.
<!-- * Merge population data with shape files (if-else-exception for countries with own shape files) -->

```{r}
pop <- pop |> 
  mutate(growth_perc = ((POP_2011 - POP_1961) / POP_1961))
```

```{r}
#| label: function-leaflet-preset
#| echo: false
#| eval: false

leaf_map_preset <- function(shape_data) {
  leaflet() |> 
    addTiles() |> 
    addPolygons(shape_data)
}
```

Mapping geo-referenced data helps to get a good overview:

```{r}
pal <- colorNumeric("viridis", domain = NULL)
pop |> 
  slice_min(growth_perc, prop = 0.95) |> 
  leaflet() |> 
  addTiles(options = tileOptions(opacity = 0.2)) |> 
  addPolygons(
    stroke = FALSE,
    fillOpacity = 0.7,
    fillColor = ~pal(growth_perc),
    label = ~ paste0(LAU_NAME, ": ", round(growth_perc, 4))
  ) |> 
  addLegend(pal = pal, values = ~growth_perc, opacity = 1.0)
  
```

-   Make leaflet for growth rate (and maybe also for first and last year)

## Focus on Rural Areas

-   Merge population data and shape files with DEGURBA and FUA classification
-   exclude FUAs and, alternatively, DEGURBA 1 and 2 as well
-   Leaflet map w/o FUAs
-   Leaflet map w/o FUAs and w/o DEGURBA 1 and 2
